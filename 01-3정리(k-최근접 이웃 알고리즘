k-최근접 이웃  알고리즘은 여러 개의 종류(클래스)를 분류하기 위하여 사용하는 가장 간단한 머신러닝 알고리즘 이다.
만약 도미와 빙어를 분류하고자 한다면 그들의 특징을 알아야 하는데(ex:길이, 무게) 이러한 특징을 가진 데이터를 특성이라 한다.

bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

위의 코드는 도미의 길이와 무게 특성을 알려준다. 이러한 특성을 숫자로만 보는 것보다 그래프로 표현하는 것이 더욱 효과적이다.
길이를 x축으로 하고 무게를 yㅊ축으로 하고 그래프에 점으로 표시한다.(이러한 그래프를 산점도 라고 한다.)
파이썬에서 그래프를 그리는 대표적인 패키지를 맷플롯립(matplotlib)이라고 하며 산점도를 그리는 함수는 scatter()이다.

import matplotlib.pyplot as plt  # matplotlib의 pyplot 함수를 plt로 줄였다.
plt.scatter(bream_length, bream_weight)   #산점도(점)을 그린다.
plt.xlabel('length')   # x축의 이름을 정한다.
plt.ylabel('weight')   # y축의 이름을 정한다.
plt.show()  # show()함수는 준비된 그래프를 화면에 출력한다.
(데이터를 넣고 위의 코드를 입력하면 그래프가 그려진다.)

plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()
빙어 데이터를 입력하고 도미 데이터와 함께 그래프에 산점도를 그린다.

이제 머신러닝 패키지의 사이킷런을 사용하여 k-최근접 이웃 알고리즘을 사용하여 데이터를 분류할 것이다.

사이킷런 패키지를 사용하기 위해선 2차원 리스트로 만들어야 한다.
2차원 리스트로 변경후 k-최근접 이웃 알고리즘을 구현한 클래스인 KNeighborsClassifier을 임포트하고 모델을 훈련시켜 주는 메서드인 fit 메서드를 사용하여 모델을 훈련시키고 
모델을 평가하는 메서드인 score() 메서드를 사용하여 0~1 사이의 값을 반환한다.

k-최근접 이웃 알고리즘 설명: k-최근접 이웃 알고리즘은 어떤 데이터의 값을 구할 때 주위의 다른 데이터를 보고 다수를 차지하는 것을 정답으로 사용한다.
k-최근접 이웃 알고리즘은 가장 가까운 데이터 5개를 보고 결정하는데 n_neighbors 매개변수로 바꿀 수 있다.
